module.exports = {


//---------------------------------	
searchAnnotations: function (collection, topicID, tierID, annotation) {	
	const promise_query1 = new Promise((resolve, reject) => {  
	var sync1 = null;
	sync1 = queryLogic.simpleQuery(collection, topicID, tierID, annotationV);

	if (sync1) {
		setTimeout(resolve, 1000, 'sync::ready!')
	} else{
		reject('sync1::something went wrong...')	
	}
}),

//-----------------------------------------------Query1----------------------------------------------------
simpleQuery: function(collection, topicID, tierID, annotationV) {
	var resultArr = null;	
	var queryResult = collection.where('TopicID', topicID).where('TierID', tierID).where('annotationValue', annotationV)
		.find({}, {_id: 0}).lean().exec(function (err, docs) {
		resultArr = docs;	
		
		return resultArr;
  });
},

//----------------------------------------------Query2-------------------------------------------------------------

syncQueryResult: function(r1, r2, collection) {

	console.log('phase2-start!');
	
	var condition = r1.find().stream();
	condition.on('data', function(doc1){
		var result1 = doc1;
		var secondary = r2.find({
			$and: [{'SubjectID': result1.SubjectID},
			       {$or:[
						{$and:[{'time_start':{$gte: result1.time_start}}, {'time_end':{$lte: result1.time_end}}]}, 	
						{$and:[{'time_start':{$lte: result1.time_start}}, {'time_end':{$gte: result1.time_end}}]}]} ] }).stream();
		secondary.on('data', function(doc2){
						var rq = new collection({annotationID1: doc2.annotationID, annotationID2: result1.annotationID, SubjectID: doc2.SubjectID});	
						rq.save();
		});	
	});

},

//-------------------------------------------Ensure DB is set ---------------------------------------------

ensureDbisSet: function (resultDb1, resultDb2){
		var condition1 = null;
		var condition2 = null;
		
		condition1 = resultDb1.findOne();
		condition2 = resultDb2.findOne();
		while ((condition1 == null) || (condition2 == null)) {
				ensureDbisSet()
		};
};


//---------------------------------------------reset-----------------------------------------------------------------
resetDb: function(db) {	
		
	db.remove({}, function(err, removed){});

}

}